{"version":3,"sources":["pages/login/login.png","pages/login/login.js","pages/datapass/datapass.js","pages/pages.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","className","src","logo","alt","to","onClick","Datapass","props","console","log","state","deps","this","refreshList","fetch","then","response","json","data","setState","history","bordered","dataSource","map","dep","departmentString","renderItem","item","Item","Text","mark","goBack","React","Component","Home","Books","Electronics","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+FAAAA,EAAOC,QAAU,IAA0B,mC,2NCiC5BC,MAzBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,yBAAKH,UAAU,aACf,0BAAMA,UAAU,OAAhB,oBACA,kBAAC,IAAD,CAAMI,GAAG,aACP,kBAAC,IAAD,CAAQJ,UAAU,SAASK,QAAS,cAApC,qBAIF,kBAAC,IAAD,CAAMD,GAAG,aACP,kBAAC,IAAD,CAAQJ,UAAU,SAASK,QAAS,cAApC,sBAIF,8CACA,kD,+DCvBaC,E,YACnB,WAAYC,GAAQ,IAAD,6BACjB,4CAAMA,IACNC,QAAQC,IAAI,EAAKF,OACjB,EAAKG,MAAO,CAACC,KAAK,IAHD,E,iFAOjBC,KAAKC,cACLL,QAAQC,IAAI,sB,oCAGA,IAAD,OACXK,MAAM,wCACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CAACR,KAAKO,S,+BAiBd,IAEDP,EAAMC,KAAKF,MAAXC,KACCS,EAAYR,KAAKL,MAAjBa,QACR,OACE,6BAIE,kBAAC,IAAD,CAGEC,UAAQ,EACRC,WAAYX,EAAKY,KAAI,SAAAC,GAAG,OAE7B,4BAAKA,EAAIC,qBAEJC,WAAY,SAAAC,GAAI,OACd,kBAAC,IAAKC,KAAN,KACE,kBAAC,IAAWC,KAAZ,CAAiBC,MAAI,GAArB,UADF,IACkDH,MAItD,kBAAC,IAAD,CAAQtB,QAAS,WACfe,EAAQW,WADV,a,GAxD8BC,IAAMC,WCItCC,EAAO,WACX,OAAO,kBAAC,EAAD,OAGHC,EAAQ,WACZ,OAAO,wBAAInC,UAAU,QAAd,UAGHoC,EAAc,WAClB,OAAO,wBAAIpC,UAAU,QAAd,gBCGMqC,MAbf,WACE,OACE,yBAAKrC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CAAOsC,KAAK,IAAIC,OAAK,EAACC,UAAWN,IACjC,kBAAC,IAAD,CAAOI,KAAK,SAASE,UAAWL,IAChC,kBAAC,IAAD,CAAOG,KAAK,eAAeE,UAAWJ,IACtC,kBAAC,IAAD,CAAOE,KAAK,YAAYE,UAAWlC,OCDvBmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAEcC,SAASC,eAAe,SDqHtC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,kB","file":"static/js/main.6138e766.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/login.003447ce.png\";","import React from 'react';\nimport logo from './login.png';\nimport './login.css';\nimport { Button } from 'antd';\nimport { Link } from 'react-router-dom';\n\n//import {AutoComplete} from 'antd';\n\nfunction Login() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div className=\"container\">\n        <form className=\"box\">BOX 範例</form>\n        <Link to=\"/datapass\">\n          <Button className=\"button\" onClick={()=>{}}>\n            GET 範例\n          </Button>\n        </Link>\n        <Link to=\"/datapost\">\n          <Button className=\"button\" onClick={()=>{}}>\n            POST 範例\n          </Button>\n        </Link>\n        <h1>H1大小</h1>\n        <h2>H2大小</h2>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default Login;","import React from 'react'\nimport { Button, List, Typography } from 'antd'\n\nexport default class Datapass extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(this.props);\n    this.state ={deps:[]}\n  }\n\n  componentDidMount(){\n    this.refreshList();\n    console.log(\"componetDidMount\")\n  }\n\n  refreshList(){\n    fetch('http://140.115.54.75:5001/api/values')\n    .then(response=> response.json())\n    .then(data =>{\n      this.setState({deps:data});\n    });\n    \n    /*this.setState({\n      deps:[{\"DepartmentID\":1,\"Value\":2},\n      {\"DepartmentID\":1,\"Value\":2},\n      {\"DepartmentID\":1,\"Value\":2},\n      {\"DepartmentID\":1,\"Value\":2},\n      {\"DepartmentID\":12,\"Value\":23}\n    ]\n    })\n  */\n  //console.log(deps.map(dep=>{dep.DepartmentID}))\n  \n  }\n  \n\n  render() {\n\n    const {deps}=this.state;\n    const { history } = this.props\n    return (\n      <div>\n        {/*<p>demo - {config}</p>\n        <hr />\n        <h3 style={{ marginBottom: 16 }}>Default Size</h3>*/}\n        <List\n          //header={<div>Header</div>}\n          //footer={<div>Footer</div>}\n          bordered\n          dataSource={deps.map(dep=>\n            //<td>{dep.departmentID}</td>\n\t    <td>{dep.departmentString}</td>\n            )}\n          renderItem={item => (\n            <List.Item>\n              <Typography.Text mark>[ITEM]</Typography.Text> {item}\n            </List.Item>\n          )}\n        />\n        <Button onClick={() => {\n          history.goBack()\n        }}>back</Button>\n      </div>\n    )\n  }\n\n} // class Page end\n","import React from 'react';\nimport Login from './login/login';\nimport Datapass from './datapass/datapass';\n\n/**\n * These are root pages\n */\nconst Home = () => {\n  return <Login />;\n};\n\nconst Books = () => {\n  return <h1 className=\"py-3\">Books</h1>;\n};\n\nconst Electronics = () => {\n  return <h1 className=\"py-3\">Electronics</h1>;\n};\n\n/*const Data = () => {\n  return <h1 className=\"py-3\">Electronics</h1>;\n};*/\n\n/**\n * These are pages nested in Electronics\n */\nconst Mobile = () => {\n  return <h3>Mobile Phone</h3>;\n};\n\nconst Desktop = () => {\n  return <h3>Desktop PC</h3>;\n};\n\nconst Laptop = () => {\n  return <h3>Laptop</h3>;\n};\n\nexport { Home, Books, Electronics, Mobile, Desktop, Laptop, Datapass };\n","import React from 'react';\n//import './App.css';\nimport { Route } from 'react-router-dom';\nimport { Home, Books, Electronics, Datapass } from './pages/pages';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/books\" component={Books} />\n        <Route path=\"/electronics\" component={Electronics} />\n        <Route path=\"/datapass\" component={Datapass} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Switch } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <App />\n    </Switch>\n  </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}